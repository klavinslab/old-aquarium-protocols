# The third phase of the seamless knockout procedure. Screen colonies from the
# transformed samples and test whether the samples were successfully
# transformed.

#require "lab14/group4/lib.pl" # bring in wrapper functions

argument
	plates: sample array, "The plates you wish to screen"
  pfwd: sample array, "The forward primer"
  prev1s: sample array, "Reverse primers for knockout test group"
#	note: "The reverse knockout test primers must be in the same order as the plates"
  prev2s: sample array, "Reverse primers for control group"
  phusion_enzyme: sample, "The Phusion HF Master Mix stock"
  ladder_one: sample, "the reference ladder for Gel electrophoresis"
 end

wells = 6 # use a 6-well comb

place boil_cells
  protocol: "labw14/group4/boil_cells.pl"
	argument
		template_plate: plates
	end
  group: aquarium_user
  start: now()
	marked: true
end

place pcr_prepare
  protocol: "labw14/group4/pcr_prepare.pl"
  group: aquarium_user
  argument
		pfwds: pfwd
		prev1s: prev1s
		prev2s: prev2s
  	enzyme_id: phusion_enzyme
  end
  start: now()
end

wire (boil_cells, "sample_count") => (pcr_prepare, "sample_count")

#pcr_tube: 2 * length(plates)
#gels = (2 * length(plates)) / wells
gels = 1
place pour_gels
  protocol: "labw14/group4/pour_gels_parallel.pl"
  group: aquarium_user
  argument
  	percentage: 1
		comb_n: 1
		well_n: wells
		gel_n: gels
  end
  start: now()
end

place run_gels
  protocol: "labw14/group4/run_gel_parallel.pl"
  argument
	  fragment_volume: 20
	  num_gels: gels, "the number of gels to run"
	  #pcr_count: pcr_tube, "The number of PCR tubes to run"
  end
  start: minutes(20)
end
wire (pour_gels, "gel_n") => (run_gels, "num_gels")
wire (pcr_prepare, "pcr_count") => (run_gels, "pcr_count")

place image_gels
  protocol: "labw14/group4/image_gel.pl"
  start: now()
end
wire (pour_gels, "gel_n") => (image_gels, "gel_count")

# forward transitions
transition [boil_cells] => [pcr_prepare] when !error(0) && completed(0) end
transition [pcr_prepare] => [pour_gels] when !error(0) && completed(0) end
transition [pour_gels] => [run_gels] when !error(0) && completed(0) end
transition [run_gels] => [image_gels] when !error(0) && completed(0) end
transition [image_gels] => [] when !error(0) && completed(0) end

# reverse transitions
transition [boil_cells] => [boil_cells] when error(0) end
transition [pcr_prepare] => [pcr_prepare] when error(0) end
transition [pour_gels] => [pour_gels] when error(0) end
transition [run_gels] => [run_gels] when error(0) end
transition [image_gels] => [image_gels] when error(0) end

