argument
  e_coli_strain: sample array, "the E. coli strains you wish to preform the knockouts in. NOTE: the nth E. coli strain will be knocked out by the nth cassette" 
  knockout_fragments: sample array, "the cassettes you wish to transform into the strains, respectively"
  #note: "The nth E. coli strain will be knocked out with the nth cassette"
  #strain_name: string, "the name of the strain you are producing today (copy it from Week4 lab description in Google Drive"
#  plate_type: sample array, "The appropriate selection plates (thyamine+trimethoprim or minimal-media)"
  pfwd: sample array, "The forward primer"
  prev1s: sample array, "Reverse primers for knockout test group"
  prev2s: sample array, "Reverse primers for control group"
  phusion_enzyme: sample, "The Phusion HF Master Mix stock"
  ladder_one: sample, "the reference ladder for Gel electrophoresis"
end


place transform
  protocol: "labw14/group4/transform.pl"
  argument
    plasmid_id: knockout_fragments
    dna_vol: 2
    e_coli_map: e_coli_strain
    e_coli_strain_type: e_coli_strain
  end
  group: aquarium_user
  start: now()
  window: minutes(1)
end

place incubate_tube
  protocol: "labw14/group4/incubate_tube.pl"
  argument
    temp: 30
  end
  group: aquarium_user
  start: now()
  window: minutes(2)
end

wire (transform,"transformed_cells_ids") => (incubate_tube,"e_coli_strain_id")

place plate
  protocol: "labw14/group4/plate.pl"
  group: aquarium_user
  argument
    volume: 200
    plate_type: "LB Kan plate (sterile)" #plate_type
  end
  start: now() #minutes(30)
  window: hours(1)
end

wire (transform,"transformed_cells_id") => (plate,"e_coli_strain_id")

place boil_cells
  protocol: "labw14/group4/boil_cells.pl"
  group: aquarium_user
  start: now()
end

wire (plate, "plate_id") => (boil_cells, "template_plate")

transition [incubate_tube] => [plate] when !error(0) && completed(0) end 
transition [plate] => [] when !error(0) && completed(0) end
# T1 -> []
transition [transform] => [incubate_tube] when !error(0) && completed(0) && (return_value(0,"time_constant") >= 3) end

# T1 -> T1
transition [ transform ] => [ transform ] when !error(0) && completed(0) && (return_value(0,"time_constant") < 3) && (num_trans == 1)
    do
        num_trans = num_trans + 1
    end
end

