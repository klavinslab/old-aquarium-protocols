# Arguments
argument
  source_oligos1: sample array fragments, "Choose the oligonucleotides you want to combine"
  source_oligos2: sample array fragments, "Choose the oligonucleotides you want to combine"
end


# Places
place stock1
  protocol: "labw14/group6/make_master_stock.pl"
  argument
    oligonucleotides: source_oligos1
  end
  group: aquarium_user
  marked: true
  start: now()
  window: minutes(30)
end

place stock2
  protocol: "labw14/group6/make_master_stock.pl"
  argument
    oligonucleotides: source_oligos2
  end
  group: aquarium_user
  marked: true
  start: now()
  window: minutes(30)
end


place assembly1
  protocol: "labw14/group6/gene_assembly_PCA.pl"
  group: aquarium_user
  start: now()
  window: minutes(30)
end

place assembly2
  protocol: "labw14/group6/gene_assembly_PCA.pl"
  group: aquarium_user
  start: now()
  window: minutes(30)
end

place run_gel
  protocol: "labw14/group6/run_gel_test.pl"
  group: aquarium_user
  start: now()
  window: minutes(30)
end

place image_gel
  protocol: "labw14/group6/run_gel_purification.pl"
  argument
    DNA_sample: input4
  end
  group: aquarium_user
  start: now()
  window: minutes(1)
end

place cut_gel
  protocol: "labw14/group6/gibbson_assembly.pl"
  argument
    DNA_sample: input5
  end
  group: aquarium_user
  start: now()
  window: minutes(1)
end

place gel_purify
  protocol: "labw14/group6/transform_e_coli.pl"
  argument
    DNA_sample: input6
  end
  group: aquarium_user
  start: now()
  window: minutes(1)
end

place gibson
  protocol: "labw14/group6/colony_PCR.pl"
  argument
    transformed_e_coli: input7
  end
  group: aquarium_user
  start: now()
  window: minutes(1)
end

place transformation
  protocol: "labw14/group6/run_gel_test.pl"
  argument
    DNA_sample: input8
  end
  group: aquarium_user
  start: now()
  window: minutes(1)
end

place plate
end

#Wires are a place-holder for now, totally nonesense currently

wire (stock, "working_fragments") => (assembly, "oligonucleotides")

transition [ one ] => [ two ] when !error(0) && completed(0) end
transition [ one ] => [one] when error(0) end

transition [ two ] => [ three ] when !error(0) && completed(0) end
transition [ two ] => [ two ] when error(0) end

transition [ three ] => [ four ] when !error(0) && completed(0) end
transition [ three ] => [ three ] when error(0) end

transition [ four ] => [ five ] when !error(0) && completed(0) end
transition [ four ] => [ four ] when error(0) end

transition [ five ] => [ six ] when !error(0) && completed(0) end
transition [ five ] => [ five ] when error(0) end

transition [ six ] => [ seven ] when !error(0) && completed(0) end
transition [ six ] => [ six ] when error(0) end

transition [ seven ] => [ eight ] when !error(0) && completed(0) end
transition [ seven ] => [ seven ] when error(0) end

transition [ eight ] => [] when !error(0) && completed(0) end
transition [ eight ] => [eight ] when error(0) end
