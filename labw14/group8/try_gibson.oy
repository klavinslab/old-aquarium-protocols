
argument
  gibson_specification: string, "File name specifying fragments and gibson concentrations"
end

# summary
# use a function to get data entry by reading in a file that is a nested matrix?
# use a string to select the file 
# have placeholders in file for colony count

# returns [[fragment: sample, concentration: in_uL], ...]

# run gibsons 
# ignores error in one gibson (an abort) ; can't recover in place

# transform to test the gibson results
# count the number of colonies and record in the log

     # TODO fetch history to find parameter values; call to another system using HTTP Get?

place try_until_successful
  protocol: "labw14/group8/try_gibson.pl"
  argument
    filename: gibson_specification
  end
  group: aquarium_user      #generic, general
  marked: true           #start here
  start: now()
  window: minutes(1)     #start in the next minute
end

# check which ones worked, implicit dependency on try_gibson
place verify_gibson
  protocol: "labw14/group8/verify_gibson.pl"
end

place success
  protocol: "labw14/group8/record_gibson.pl"
end


wire (try_until_successful,"pcr_results") => (verify_gibson,"possibly_successful_gibsons")
wire (verify_gibson,"successful_gibsons") => (success,"successful_gibsons")
  # may need to have assistant enter concentration that was successful, want to store in inv info tho
 
# forward transitions

transition [try_until_successful] => [verify_gibson] when !error(0) && completed(0) end
transition [verify_gibson] => [success] when !error(0) && completed(0) end


# rework transitions
# can I check a logged variable for success or failure here instead?
# i.e. error should be an exception state instead of used normally
transition [verify_gibson]     => [try_until_successful]    when error(0) end
