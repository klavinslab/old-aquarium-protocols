# run gibsons 
# note: ignores error in one gibson (an abort) ; can't recover in place

# datastructure
# plasmid, along with links to fragments (like the oligo assembly type)
# then, in the :data field, do fragment1_amount_mircoliters: number

# create sample type, gibson reaction specification
#     instead of having fake objects in the inventory
# import samples of this type with fields having numbers for each fragment and a link to a plasmid that will result


# implicit step, add later
# job scheduler creates sample types ahead of time by importing from spreadsheet
# specifying the concentrations

# have user create new plasmid using the UI, then schedule next protocol and ask them for the
# name of the plasmid, rather, a string array of them
# but then, how to read in the concentration data? just do it manually I guess

# TODO
# make json file format
# minimal feature set

argument
  file: string, "Path to the file with the gibsons, currently hardcoded so this is ignored"
  gibson_master_mix: sample array, "Gibson master mix (have to cancel the protocol if this runs out). Extra are backup (not yet implemented)."
  gibson_master_mix_amt: number, "Amount of Gibson master mix to add to PCR tube, in uL"
  #e_coli_strain_type: object, "The electrocompetent aliquot to be transformed"
  volume: number, "The volume (ÂµL) to plate, put 200 if you don't know what to put"
  plate_type: object, "Type of plate (from the solidmedia category)"
end

e_coli_strain_type = "DH5alpha Electrocompetent Aliquot"

# inspired by "labw14/group6/full_length_protocols/introduction.pl"
place introduction
  protocol: "labw14/group8/final/introduction.pl"
  group: aquarium_user  #generic, general
  marked: true          #start here
  start: now()          # they can start as soon as they want
  window: minutes(30)   # modify this to coincide with weekly scheduling
end

place get_concentrations
  protocol: "labw14/group8/final/read_concentrations_and_take.pl"
  argument
    gibson_master_mix_amt: gibson_master_mix_amt
  end
  group: aquarium_user      
  start: now()
  window: minutes(1)     #start in the next minute
end

place do_gibson
  protocol: "labw14/group8/final/do_gibson.pl"
  argument
    gibson_master_mix_amt: gibson_master_mix_amt
    gibson_master_mix: gibson_master_mix
  end
  group: aquarium_user      #generic, general
  start: now()
  window: minutes(1)     #start in the next minute
end

# transform to test the gibson results
# count the number of colonies and record in the log
place verify_gibson
  protocol: "labw14/group8/verify_gibson.pl"
  argument
    e_coli_strain_type: e_coli_strain_type
    volume: volume
    plate_type: plate_type
  end
  group: aquarium_user      #generic, general
  start: now()
  window: days(1)     #have a limit so any stock you selected args for doesn't go out
end

# based off of  protocols / labw14 / week1 / trans / image.pl
place image_plates
  protocol: "labw14/group8/verify_gibson.pl"
  argument
    e_coli_strain_type: e_coli_strain_type
    volume: volume
    plate_type: plate_type
  end
  group: aquarium_user      #generic, general
  start: hours(12)
  window: days(1)     #have a limit so any stock you selected args for doesn't go out
end
# last step incubated colonies

# count the number of colonies and record in the log
place redo
  protocol: "labw14/group8/add_colony_counts_to_samples.pl" # placeholder for imaging and getting colony counts
  group: aquarium_user      #generic, general
  start: now() # this starts 18 hours later, add after testing done
  window: minutes(1)
end

place success
  protocol: "labw14/group8/gibson_results_summary.pl"
  group: aquarium_user      #generic, general
  start: now()
  window: minutes(1)     #start in the next minute
end

wire(get_concentrations, "pipetting_plan") => (do_gibson, "pipetting_plan")
wire(get_concentrations, "plasmids_to_make") => (do_gibson, "plasmids_to_make")

wire(do_gibson, "completed_samples") => (verify_gibson, "gibsons")

wire(verify_gibson, "plates") => (success, "gibson_results") 
 
# forward transitions
transition [introduction] => [get_concentrations] when !error(0) && completed(0) end
transition [get_concentrations] => [do_gibson] when !error(0) && completed(0) end
transition [do_gibson] => [verify_gibson] when !error(0) && completed(0) end
transition [verify_gibson] => [success] when !error(0) && completed(0) end


# rework transitions
# can I check a logged variable for success or failure here instead?
# i.e. error should be an exception state instead of used normally
# TODO pass only the failed gibsons
transition [verify_gibson]     => [redo]    when error(0) end
