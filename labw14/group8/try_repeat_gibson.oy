# args: primer, next_primer_amount_to_try (history) -> (number, history)

# objs : everything, incl basics
# samples: every obj that is not a basic
# see http://bioturk.ee.washington.edu:3011/sample_types

# we'll ignore any logic around primers for now. TODO try multiple concentrations the first time

argument
  primer_array_input: sample array, "Primers to combine"
  plasmid_input: sample, "Plasmid backbone"
end

# TODO fetch history to find parameter values; call to another system using REST?

# try_gibson tries multiple concentrations according to a step
#  lily: alternatively, fill up the extra pcr tubes with other concentrations from the beginning?

place try_until_successful
  protocol: "labw14/group8/try_gibson.pl"
  argument
    primer_array_input: primer_array_input
  end
  group: aquarium_user      #generic, general
  marked: true           #start here
  start: now()
  window: minutes(1)     #start in the next minute
end

# check which ones worked, implicit dependency on try_gibson
place verify_gibson
  protocol: "labw14/group8/verify_gibson.pl"
end

place success
  protocol: "labw14/group8/record_gibson.pl"
end


wire (try_until_successful,"pcr_results") => (verify_gibson,"possibly_successful_gibsons")
wire (verify_gibson,"successful_gibsons") => (success,"successful_gibsons")
  # may need to have assistant enter concentration that was successful, want to store in inv info tho
 
# forward transitions

transition [try_until_successful] => [verify_gibson] when !error(0) && completed(0) end
transition [verify_gibson] => [success] when !error(0) && completed(0) end


# rework transitions
# can I check a logged variable for success or failure here instead?
# i.e. error should be an exception state instead of used normally
transition [verify_gibson]     => [try_until_successful]    when error(0) end
