# run gibsons 
# note: ignores error in one gibson (an abort) ; can't recover in place
argument
  number_of_fragments: number, "The number of fragments used in the gibsons you want to run."
end

place get_concentrations
  protocol: "labw14/group8/read_concentrations_and_take.pl"
  argument
    number_of_fragments: number_of_fragments
  end
  group: aquarium_user      #generic, general
  marked: true           #start here
  start: now()
  window: minutes(1)     #start in the next minute
end

# I went to wire this up but can't declare an argument to go from getting the matrix
# to receive the matrix at the next step
place do_gibson
  protocol: "labw14/group8/do_gibson.pl"
  group: aquarium_user      #generic, general
  marked: true           #start here
  start: now()
  window: minutes(1)     #start in the next minute
end



# transform to test the gibson results
# count the number of colonies and record in the log
place verify_gibson
  protocol: "labw14/group8/verify_gibson.pl"
  group: aquarium_user      #generic, general
  marked: true           #start here
  start: now()
  window: minutes(1)     #start in the next minute
end

# last step incubated colonies
# this starts 18 hours later
# count the number of colonies and record in the log
place verify_gibson
  protocol: "labw14/group8/add_colony_counts_to_samples.pl" # placeholder for imaging and getting colony counts
  group: aquarium_user      #generic, general
  marked: true           #start here
  start: hours(18)
  window: hours(4)
end


# at redo, I want to reschedule the metacol for a different set of concentrations
# instead, just log the failed ones
place redo
  protocol: "labw14/group8/verify_gibson.pl" #placeholder
end

place success
  protocol: "labw14/group8/gibson_results_summary.pl"
end

wire(get_concentrations, "result") => (do_gibson, "sample_concentrations")
wire(do_gibson, "result") => (verify_gibson, "gibsons")
# only ask for concentrations from samples you need
# wire(verify_gibson, "failed_gibsons") => (redo, "failed_gibsons") 
 
# forward transitions

transition [get_concentrations] => [do_gibson] when !error(0) && completed(0) end
transition [do_gibson] => [verify_gibson] when !error(0) && completed(0) end
transition [verify_gibson] => [success] when !error(0) && completed(0) end


# rework transitions
# can I check a logged variable for success or failure here instead?
# i.e. error should be an exception state instead of used normally
# TODO pass only the failed gibsons
transition [verify_gibson]     => [redo]    when error(0) end
