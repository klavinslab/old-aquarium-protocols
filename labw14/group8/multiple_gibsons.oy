# run gibsons 
# note: ignores error in one gibson (an abort) ; can't recover in place

# datastructure
# plasmid, along with links to fragments (like the oligo assembly type)
# then, in the :data field, do fragment1_amount_mircoliters: number

# create sample type, gibson reaction specification
#     instead of having fake objects in the inventory
# import samples of this type with fields having numbers for each fragment and a link to a plasmid that will result


# implicit step, add later
# job scheduler creates sample types ahead of time by importing from spreadsheet
# specifying the concentrations

# have user create new plasmid using the UI, then schedule next protocol and ask them for the
# name of the plasmid, rather, a string array of them
# but then, how to read in the concentration data? just do it manually I guess

# TODO
# make json file format
# minimal feature set

argument
  fragments: sample array, "Read your input file and select all the fragment stock
                            needed for the gibsons"
  file: string, "Path to the file with the gibsons"
end

place get_concentrations
  protocol: "labw14/group8/read_concentrations_and_take.pl"
  group: aquarium_user      #generic, general
  marked: true           #start here
  start: now()
  window: minutes(1)     #start in the next minute
end

place do_gibson
  protocol: "labw14/group8/do_gibson.pl"
  argument
    fragments: fragments
  end
  group: aquarium_user      #generic, general
  start: now()
  window: minutes(1)     #start in the next minute
end

# transform to test the gibson results
# count the number of colonies and record in the log
place verify_gibson
  protocol: "labw14/group8/verify_gibson.pl"
  group: aquarium_user      #generic, general
  start: now()
  window: minutes(1)     #start in the next minute
end

# last step incubated colonies

# count the number of colonies and record in the log
place redo
  protocol: "labw14/group8/add_colony_counts_to_samples.pl" # placeholder for imaging and getting colony counts
  group: aquarium_user      #generic, general
  start: now() # this starts 18 hours later, add after testing done
  window: minutes(1)
end

place success
  protocol: "labw14/group8/gibson_results_summary.pl"
  group: aquarium_user      #generic, general
  start: now()
  window: minutes(1)     #start in the next minute
end

wire(get_concentrations, "gibsons") => (do_gibson, "gibsons")
wire(get_concentrations, "pipetting_plan") => (do_gibson, "pipetting_plan")


wire(do_gibson, "completed_samples") => (verify_gibson, "gibsons")

# only ask for concentrations from samples you need
# wire(verify_gibson, "failed") => (redo, "failed_gibsons") 
 
# forward transitions

transition [get_concentrations] => [do_gibson] when !error(0) && completed(0) end
transition [do_gibson] => [verify_gibson] when !error(0) && completed(0) end
transition [verify_gibson] => [success] when !error(0) && completed(0) end


# rework transitions
# can I check a logged variable for success or failure here instead?
# i.e. error should be an exception state instead of used normally
# TODO pass only the failed gibsons
transition [verify_gibson]     => [redo]    when error(0) end
